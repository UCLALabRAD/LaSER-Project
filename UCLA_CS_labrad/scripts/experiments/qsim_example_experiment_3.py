#!scriptscanner

import time
import labrad
import numpy as np
from labrad.units import WithUnit as U
from UCLA_CS_labrad.scripts.experiments.qsimexperiment import QsimExperiment


class QsimExampleExperiment3(QsimExperiment):

    name = 'Qsim Example Experiment 3'  # gives a name to display on scriptscanner

    """
    This experiment_example inherits from the QsimExperiment Class which in
    turn inherits from the experiment class. This provides functionality for
    saving data, plotting and connecting to script scanner in order to register
    experiments and update progress

    This has been modified from the original example experiment in that it attempts 
    to connect to a serial device, and uses both read and write functionality on the serial bus.
    
    QsimExampleExperiment3 can use any Function Generator supported by the Function Generator Server
    (a full server subclassed from the GPIB Managed Device Server). This instrument is a GPIB device.
    
    
    To set up the experiment, a Function Generator must be plugged into a computer running a GPIB Bus Server, and the
    GPIB Device Manager and Function Generator Server must be running.
    
    If device is simulated, the "Function Generator" is an instance of a subclass of SimulatedFunctionGenegeratorInstrument in the Hardware Simulation Server.

    
    Simulating this experiment shows we can change the value of a property of a GPIB device via a GPIB set command,
    that the device can maintain an internal state, and that we can get the value of a property of a GPIB device via a GPIB query command.

    """

    # The following defines which parameters you would like to use from
    # parameter vault All parameters must be defined in the registry under
    # the Parameter Vault folder before they are available in the experiment.
    # All parameters will be available in the main experiment function via a
    # variable named self.p.parameter_folder.parameter

    # The format is (parameter folder, parameter)
    
    #QsimExampleExperiment3 has 4 parameters: Function_Generator_Name, Frequency, Amplitude, and Plot_Points.
    #Function_Generator_Name is a string parameter, Frequency and Amplitude are float parameters, and Plot_Points is a scan parameter.
    #The Function_Generator_Name parameter must be set to the name of the plugged-in device on the Function Generator Server
    #(which is based off of which computer’s bus it’s on and the VISA resource name of the device).
    
    exp_parameters = [
        # function generator parameters
        ('QsimExampleExperiment3Parameters', 'Function_Generator_Name'),
        ('QsimExampleExperiment3Parameters', 'Frequency'),
        ('QsimExampleExperiment3Parameters', 'Amplitude'),
        ('QsimExampleExperiment3Parameters', 'Plot_Points')
    ]

    def initialize(self, cxn, context, ident):
        """
        This function does any initialization needed, such as connecting to
        equipment servers or setting up Data Vault or the grapher.
        Objects available in this function are cxn (a connection to LabRAD),
        context (the LabRAD connection id) and ident (the scriptscanner connection id)
        self.p.example_parameters.
        """
        # set up experiment logistics
        self.ident = ident     
        self.setup_datavault('Range', 'Amplitude')
        # required for script scanner to manage different instances

        # set up function generator
        self.fg_server = cxn.function_generator_server
        
        #The experiment first makes a Function Generator Server request to select the device based on the Function_Generator_Name parameter.
        self.fg_server.select_device(self.p.example_parameters.Function_Generator_Name)
        #Then, it makes a request to this server to toggle on the device’s output channel.
        self.fg_server.toggle(True)



        #It makes two more requests to this server to set the frequency and amplitude of the
        #electrical output signal to the Frequency and Amplitude parameters’ values respectively.
        self.fg_server.frequency(self.p.example_parameters.Frequency)
        self.fg_server.amplitude(self.p.example_parameters.Amplitude)

    def run(self, cxn, context):
        """
        Here is where you write your experiment using the parameters imported
        to affect equipment that you connected to in initialize.

        For this example, we will draw a waveform corresponding to the one being generated by
        the function generator.
        """
        # the following generates a list of the points used in the scan. If the points
        # have LabRAD unit types they can be specified in the second argument
        self.x_values = self.get_scan_list(self.p.example_parameters.Plot_Points, units=None)
        
        #It then uses a Function Generator Server request to get the frequency and amplitude of the output signal.
        self.frequency = self.fg_server.frequency()
        self.amplitude = self.fg_server.amplitude()

        # Main Loop. Every iteration will have an index i and an associated x point
        for i, x_point in enumerate(self.x_values):

            # The following updates the Script Scanner progress with a number between 0 and 1
            # with 0 being 0% and 1 being 100% completed. If the user has pressed stop on script scanner the for loop
            # is broken. This functionality is optional but extremely helpful.

            should_break = self.update_progress(i/float(len(self.x_values)))
            if should_break:
                break

            #For each x-value encoded in the Plot_Points parameter, it calculates the value a sine wave having that frequency and
            #amplitude would have for that x-value, and adds this data point to the dataset.
            y_point = self.amplitude * np.sin(2 * np.pi * self.frequency * x_point) # calculates the waveform
            self.dv.add(x_point, y_point)                                           # adds the data to Data Vault

    def finalize(self, cxn, context):
        """
        In the finalize function we can close any connections or stop any
        processes that are no longer necessary.
        """
        # switch off function generator
        self.fg_server.toggle(False)


if __name__ == '__main__':
    # Launches script if code is run from terminal instead of script scanner
    cxn = labrad.connect()                  # creates LabRAD connection
    scanner = cxn.script_scanner             # connects to script scanner server
    exprt = QsimExampleExperiment3(cxn=cxn)     # instantiates the experiment
    ident = scanner.register_external_launch(exprt.name)  # registers an experiment with Script Scanner
    exprt.execute(ident)                    # executes the experiment
