#!scriptscanner

import time
import labrad
import numpy as np
from labrad.units import WithUnit as U
from UCLA_CS_labrad.scripts.experiments.qsimexperiment import QsimExperiment


class cs_example_experiment_3(QsimExperiment):

    name = 'cs_example_experiment_3'  # gives a name to display on scriptscanner

    """
    This experiment_example inherits from the QsimExperiment Class which in
    turn inherits from the experiment class. This provides functionality for
    saving data, plotting and connecting to script scanner in order to register
    experiments and update progress

    This has been modified from the original example experiment in that it attempts 
    to connect to a serial device, and uses both read and write functionality on the serial bus.
    """

    # The following defines which parameters you would like to use from
    # parameter vault All parameters must be defined in the registry under
    # the Parameter Vault folder before they are available in the experiment.
    # All parameters will be available in the main experiment function via a
    # variable named self.p.parameter_folder.parameter

    # The format is (parameter folder, parameter)
    exp_parameters = [
        # function generator parameters
        ('example_parameters', 'Function_Generator_Name'),
        ('example_parameters', 'Frequency'),
        ('example_parameters', 'Amplitude'),
        ('example_parameters', 'Plot_Points')
    ]

    def initialize(self, cxn, context, ident):
        """
        This function does any initialization needed, such as connecting to
        equipment servers or setting up Data Vault or the grapher.
        Objects available in this function are cxn (a connection to LabRAD),
        context (the LabRAD connection id) and ident (the scriptscanner connection id)
        self.p.example_parameters.
        """
        # set up experiment logistics
        self.ident = ident     
        self.setup_datavault('Range', 'Amplitude')
        # required for script scanner to manage different instances

        # set up function generator
        self.fg_server = cxn.cs_function_generator_server
        self.fg_server.select_device(self.p.example_parameters.Function_Generator_Name)
        self.fg_server.toggle(True)

        # set up waveform
        self.fg_server.frequency(self.p.example_parameters.Frequency)
        self.fg_server.amplitude(self.p.example_parameters.Amplitude)

    def run(self, cxn, context):
        """
        Here is where you write your experiment using the parameters imported
        to affect equipment that you connected to in initialize.

        For this example, we will draw a waveform corresponding to the one being generated by
        the function generator.
        """
        # the following generates a list of the points used in the scan. If the points
        # have LabRAD unit types they can be specified in the second argument
        self.x_values = self.get_scan_list(self.p.example_parameters.Plot_Points, units=None)
        self.frequency = self.fg_server.frequency()
        self.amplitude = self.fg_server.amplitude()

        # Main Loop. Every iteration will have an index i and an associated x point
        for i, x_point in enumerate(self.x_values):

            # The following updates the Script Scanner progress with a number between 0 and 1
            # with 0 being 0% and 1 being 100% completed. If the user has pressed stop on script scanner the for loop
            # is broken. This functionality is optional but extremely helpful.

            should_break = self.update_progress(i/float(len(self.x_values)))
            if should_break:
                break

            y_point = self.amplitude * np.sin(2 * np.pi * self.frequency * x_point) # calculates the waveform
            self.dv.add(x_point, y_point)                                           # adds the data to Data Vault

    def finalize(self, cxn, context):
        """
        In the finalize function we can close any connections or stop any
        processes that are no longer necessary.
        """
        # switch off function generator
        self.fg_server.toggle(False)


if __name__ == '__main__':
    # Launches script if code is run from terminal instead of script scanner
    cxn = labrad.connect()                  # creates LabRAD connection
    scanner = cxn.cs_script_scanner             # connects to script scanner server
    exprt = cs_example_experiment_3(cxn=cxn)     # instantiates the experiment
    ident = scanner.register_external_launch(exprt.name)  # registers an experiment with Script Scanner
    exprt.execute(ident)                    # executes the experiment
